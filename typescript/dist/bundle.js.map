{"version":3,"file":"bundle.js","sources":["../src/index.ts"],"sourcesContent":["interface IMyArr<T> {\n  [key: number]: T\n}\ninterface ICreateArray {\n  <T>(x: number, y: T): IMyArr<T>\n}\n// interface 后面的类型和函数前面的类型区别, 如果放在函数前面 表示使用函数的时候确定了类型\n// 放在接口后面表示使用接口的时候确定类型\nconst createArray: ICreateArray = <T>(times: number, value: T): IMyArr<T> => {\n  let result = []\n  for (let i = 0; i < times; i++) {\n    result.push(value)\n  }\n  return result\n}\n\n// 泛型约束\n// 约束 比如约束必须有length属性\ntype withLeng = {length:number}\nconst computerArrayLength = <T extends withLeng,K extends withLeng>(arr1:T, arr2:K) :number => {\n  return arr1.length + arr2.length\n}\ncomputerArrayLength([1,2,3], {length: 4})\n\n\n//-------\nconst getVal = <T extends object, K extends keyof T>(obj:T,key:K) => {\n\n}\ngetVal({a:1,b:2}, 'b')"],"names":[],"mappings":";;;EAmBA,IAAM,mBAAmB,GAAG,UAAwC,IAAM,EAAE,IAAM,EAAA;EAChF,IAAA,OAAO,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAA;EAClC,CAAC,CAAA;EACD,mBAAmB,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAE,EAAC,MAAM,EAAE,CAAC,EAAC,CAAC;;;;;;"}